### A Pluto.jl notebook ###
# v0.15.1

using Markdown
using InteractiveUtils

# ╔═╡ 79cb0280-efec-11eb-2d78-257120747e5f
begin
	import Pkg
	Pkg.activate("../environments/v1.6")
	using Plots, PlutoUI, NeuralDynamics, Statistics
	TableOfContents()
end

# ╔═╡ a967ce00-b71a-40b0-a394-fc912f3aa235
md"""
# Two-dimensional models of neurons

The Hodgkin-Huxley(HH) model is not easy to analyze, especially without simulations. Leaky integrate-and-fire models are simple, but seem "artificial": action potentials are generated by construction, through an arbitrary threshold. Fortunately, approximate 2D models exist, which will allow us to understand in more detail possible mechanisms of spike generation. The general form of this class of models is:

$\tau \dot{u} = F(u,w) + RI$
$\tau_{w} \dot{w} = G(u,w)$

where $u$, $I$, and $R$ denote the membrane voltage, input current, and resistane. We also have some general (unknown at the moment) functions $F$ and $G$. $w$ is known as a 'recovery variable'. It summarizes the dynamics of three gating variables describing the dynamics of sodium and potassium channels in the HH model.

Importantly $\tau_{w} >> \tau$, i.e., the dynamics of the recovery variable is slow compared to the dynamics of the voltage. This is part of the reason why leaky integrate-and-fire models work pretty well.

## FitzHugh-Nagumo model
The FitzHugh-Nagumo model is given by the equations: 

$F(u,w) = u - \frac{1}{3}u^3-w$
$G(u,w) = b_{0}+b_{1}u-w$

Note that both equations are linear in $w$. The only nonlinearity is pretty simple: a cubic term in $u$.

"""

# ╔═╡ 48321fac-f274-4205-b841-6006160e1e5e
begin
	## Construct parameter objects
	mutable struct modelParameters
		tau1::Float64      # tau u
		tau2::Float64      # tau w
		b0::Float64      	   
		b1::Float64
		R::Float64
		I::Float64     	   # input current
	end
		
	mutable struct simParameters
		t::Float64         # simulation length
		dt::Float64        # simulation step
	end
	
	## Initialize Model
	function initializeModel(tau1, tau2, b0, b1, R, I, t, dt)
		modelInit = modelParameters(tau1, tau2, b0, b1, R, I)
		simInit = simParameters(t, dt)
		return  (modelInit, simInit)
	end
	
	## FitzHughNagumo model
	@. function nullclinewu(u, R, I)
		return u - (u^3)/3 + R*I
	end
	
	@. function nullclineww(u, b0, b1)
		return b0 + b1 * u
	end
	
	function FitzHughNagumo(u;tau1=1, tau2=2, b0=0.9, b1=1.1, R=1, I=0, t=100, dt=0.1)
		mdl, sim = initializeModel(tau1, tau2, b0, b1, R, I, t, dt)
		
		wuNull = nullclinewu(u, mdl.R, mdl.I)
		wwNull = nullclineww(u, mdl.b0, mdl.b1)
		
		return wuNull, wwNull
	end
end

# ╔═╡ c2409c82-fdfd-4d4e-bc1d-4c8ff70e6a2f
begin
	uArr = -2.5:0.01:2.5
	wuNull, wwNull = FitzHughNagumo(uArr)
	
	plot(uArr, wuNull, color=:red, legend=true, label="u-nullcline")
	plot!(uArr, wwNull, color=:blue, label="w-nullcline")
end

# ╔═╡ Cell order:
# ╠═79cb0280-efec-11eb-2d78-257120747e5f
# ╟─a967ce00-b71a-40b0-a394-fc912f3aa235
# ╠═48321fac-f274-4205-b841-6006160e1e5e
# ╠═c2409c82-fdfd-4d4e-bc1d-4c8ff70e6a2f
