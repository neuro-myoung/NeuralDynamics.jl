### A Pluto.jl notebook ###
# v0.15.1

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ╔═╡ 79cb0280-efec-11eb-2d78-257120747e5f
begin
	import Pkg
	Pkg.activate("../environments/v1.6")
	using Plots, PlutoUI, NeuralDynamics, Statistics, Parameters
	TableOfContents()
end

# ╔═╡ a967ce00-b71a-40b0-a394-fc912f3aa235
md"""
# Two-dimensional models of neurons

The Hodgkin-Huxley(HH) model is not easy to analyze, especially without simulations. Leaky integrate-and-fire models are simple, but seem "artificial": action potentials are generated by construction, through an arbitrary threshold. Fortunately, approximate 2D models exist, which will allow us to understand in more detail possible mechanisms of spike generation. The general form of this class of models is:

$\tau \dot{u} = F(u,w) + RI$
$\tau_{w} \dot{w} = G(u,w)$

where $u$, $I$, and $R$ denote the membrane voltage, input current, and resistane. We also have some general (unknown at the moment) functions $F$ and $G$. $w$ is known as a 'recovery variable'. It summarizes the dynamics of three gating variables describing the dynamics of sodium and potassium channels in the HH model.

Importantly $\tau_{w} >> \tau$, i.e., the dynamics of the recovery variable is slow compared to the dynamics of the voltage. This is part of the reason why leaky integrate-and-fire models work pretty well.

## FitzHugh-Nagumo model
The FitzHugh-Nagumo model is given by the equations: 

$F(u,w) = u - \frac{1}{3}u^3-w$
$G(u,w) = b_{0}+b_{1}u-w$

Note that both equations are linear in $w$. The only nonlinearity is pretty simple: a cubic term in $u$.

## Nullclines

Here, we will plot nullclines.

- The u-nullcline is the set of points defined by the equation $\dot{u} = 0$.
- The w-nullcline is the set of points defined by the equation $\dot{w} = 0$.

Note that the equations for the nullclines can easily be solved for $w$. Thus, we calculate $w$ given $u$ on a given nullcline.

## Exercise

Plot nullclines for different values of $I$. Adjust the other parameters to see how they affect the nullclines and answer the following questions:

1. What kind of objects are nullclines geometrically?
The nullclines of u and w are curves in the space u, w showing where, in this plane, $\dot{u}$ and $\dot{w}$ are 0 respectively in this case.
2. What happens at the intersections of two nullclines?
The intersections define points where both slopes are zero and correspond with fixed points.

"""

# ╔═╡ 3412d5a3-4f03-467f-8d79-37abd0447c3b
md"""
tau1: $(@bind tau1a Slider(0.1:0.1:10, default=1, show_value=true))
tau2: $(@bind tau2a Slider(0.1:0.5:100, default=2, show_value=true))


b0: $(@bind b0a Slider(0.1:0.1:10, default=0.9, show_value=true))
b1: $(@bind b1a Slider(0.1:0.1:10, default=1.1, show_value=true))

R: $(@bind Ra Slider(0:0.5:10, default=1, show_value=true))
I: $(@bind Ia Slider(0:0.5:50, default=0, show_value=true))

"""

# ╔═╡ c2409c82-fdfd-4d4e-bc1d-4c8ff70e6a2f
begin
	uArr = -2.5:0.1:2.5
	
	struct modelParameters
		τ₁::Float64
		τ₂::Float64
		b₀::Float64
		b₁::Float64
		R::Float64
	end
	
	function initializeModel(; τ₁=1.0, τ₂=2.0, b₀=0.9, b₁=1.1, R=1.0)
		return modelParameters(τ₁, τ₂, b₀, b₁, R)
	end
	
	params = initializeModel(τ₁=tau1a, τ₂=tau2a, b₀=b0a, b₁=b1a, R=Ra)
	
	nrn1 = FitzHughNagumo(uArr, params; I=Ia)
	plotNullclines(nrn1; labels = ("u-nullcline","w-nullcline"), xlab="u", ylab="w",
					colors=[:red, :blue])
end

# ╔═╡ 2a6a73e3-780a-4a11-9711-2b243f39f6e2
md"""
## Vector field and trajectories

The values of $u(t)$ and $w(t)$ at each time point $t$ correspond to a single point in the phase plane, with coordinates $(u(t), w(t))$. Therefore, the time-dependent trajectory of the system can be described as a continuous curve in the phase plane, and the tangent vector to the trajectory, which is defined as the vector $(\frac{du(t)}{dt}, \frac{dw(t)}{dt})$, indicates the direction towards which the activity is evolving and how fast is the activity changing along each axis. In fact, for each point $(u, w)$ in the phase plane, we can compute the tangent vector $(\frac{du}{dt}, \frac{dw}{dt})$, which indicates the behavior of the system when it traverses that point.

The map of tangent vectors in the phase plane is called **vector field**. The behavior of any trajectory in the phase plane is determined by i) the initial conditions $(u(0), w(0))$, and ii) the vector field $(\dot{u}, \dot{w})$.

In general, the value of the vector field at a particular point in the phase plane is represented by an arrow. The orientation and the size of the arrow reflect the direction and the norm of the vector, respectively.

## Exercise

Now let's plot and analyze the vector field and a sample trajectory.
1. Implement the function that calculates $\dot{u}=\frac{du}{dt}$ and $\dot{w}=\frac{dw}{dt}$.
2. Change the initial conditions (focus on $u$) for $I=0$. What kind of stimulation protocol does this correspond to? Do we observe threshold behavior here? Are action potentials stereotypical?
3. Now change $I$. Can we define a threshold? What kind of bifurcation does the system exhibit?
"""

# ╔═╡ 740a25ad-7fcf-4404-a572-c4d6b3a5a749
md"""
tau1: $(@bind tau1b Slider(0.1:0.1:10, default=1, show_value=true))
tau2: $(@bind tau2b Slider(0.1:0.5:100, default=2, show_value=true))


b0: $(@bind b0b Slider(0.1:0.1:10, default=0.9, show_value=true))
b1: $(@bind b1b Slider(0.1:0.1:10, default=1.1, show_value=true))

R: $(@bind Rb Slider(0:0.5:10, default=1, show_value=true))
I: $(@bind Ib Slider(0:0.5:50, default=0, show_value=true))

"""

# ╔═╡ 350e9e4c-9b64-470d-aa2c-af68785e7f19
begin
	params2 = initializeModel(τ₁=tau1b, τ₂=tau2b, b₀=b0b, b₁=b1b, R=Rb)
	nrn2 = FitzHughNagumo(uArr, params2, I=Ib)
	plotNullclines(nrn2; labels = ("u-nullcline","w-nullcline"), xlab="u", ylab="w",
					colors=[:red, :blue])
	plotVectorFields!(nrn2; color="teal")
end

# ╔═╡ Cell order:
# ╠═79cb0280-efec-11eb-2d78-257120747e5f
# ╟─a967ce00-b71a-40b0-a394-fc912f3aa235
# ╟─3412d5a3-4f03-467f-8d79-37abd0447c3b
# ╟─c2409c82-fdfd-4d4e-bc1d-4c8ff70e6a2f
# ╟─2a6a73e3-780a-4a11-9711-2b243f39f6e2
# ╟─740a25ad-7fcf-4404-a572-c4d6b3a5a749
# ╟─350e9e4c-9b64-470d-aa2c-af68785e7f19
